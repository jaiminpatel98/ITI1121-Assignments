import java.util.EmptyStackException;
/** Implements the interface <code>Stack</code> using linked elements.
 *
 *
 * @author  Marcel Turcotte (turcotte@eecs.uottawa.ca)
 */

public class LinkedStack<E> implements Stack<E> {

    // Objects of the class Elem are used to store the elements of the
    // stack.
    
    private static class Elem<E> {
        private E value;
        private Elem<E> next;

        private Elem(E value, Elem<E> next) {
            this.value = value;
            this.next = next;
        }
    }

    // Reference to the top element
    
    private Elem<E> top;

    /** Returns <code>true</code> if this stack is empty, and
     * <code>false</code> otherwise.
     *
     * @return <code>true</code> if this stack is empty, and
     * <code>false</code> otherwise.
     */

    public boolean isEmpty() {
        return top == null;
    }

    /** Inserts an element onto the stack.
     *
     * @param value the element to be inserted
     */

    public void push(E value) {

 if (value == null) {
     throw new NullPointerException();
 }
 
        top = new Elem<E>(value, top);
    }

    /** Returns the top element, without removing it.
     *
     * @return the top element
     */

    public E peek() {

 // pre-condition: the stack is not empty
 
        return top.value;
    }

    /** Removes and returns the top element.
     *
     * @return the top element
     */

    public E pop() {

 // pre-condition: the stack is not empty
 
        E saved = top.value;
        top = top.next;
        return saved;

    }

    /** Removes the top element of the stack. The element inserted at
     * the bottom of the stack.
     */

    public void roll() {

      
      
    }

    private void roll(E value, Elem<E> next, E pop) {

       
        
    }

    /** Removes the botttom element. The element is inserted on the
     * top of the stack.    
     */

    public void unroll() {

    unroll(top.value, top.next);
 
    }

    private void unroll(E value, Elem<E> next) {
        Elem<E> first = new Elem<E>(value, next);
        if (next == null) {
            push(value);
            value = null;
        } else {
            unroll(next.value, next.next);
        }
    }

    /** Returns a string representation of the stack.
     *
     * @return a string representation
     */

    @Override public String toString() {
 StringBuffer stackStr = new StringBuffer("{");

 Elem<E> current = top;
 
 while (current != null) {
     stackStr.append(current.value);
     if (current.next != null) {
  stackStr.append(",");
     }
     current = current.next;
 }
 stackStr.append("}");

 return stackStr.toString();
    }
    
}